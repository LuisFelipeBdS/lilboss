"""
Medical Record Generator - Gerador de Prontu√°rios M√©dicos.

Este m√≥dulo cont√©m fun√ß√µes para gerar prontu√°rios m√©dicos em formatos
Tradicional e SOAP utilizando o Google Gemini.
"""

import streamlit as st
import google.generativeai as genai
from typing import Optional, Tuple
import time
from datetime import datetime
from .logger import get_logger
from .validators import get_friendly_error_message


class MedicalRecordGenerator:
    """
    Gerenciador de gera√ß√£o de prontu√°rios m√©dicos em diferentes formatos.
    """
    
    def __init__(self):
        """
        Inicializa o gerador de prontu√°rios.
        """
        self.model_name = "gemini-2.5-pro"
        self.model = None
        self.logger = get_logger()
        self._configure_api()
    
    def _configure_api(self) -> bool:
        """
        Configura a API do Gemini.
        
        Returns:
            True se configura√ß√£o bem-sucedida, False caso contr√°rio
        """
        try:
            self.logger.info(f"Configurando API para gera√ß√£o de prontu√°rios. Modelo: {self.model_name}")
            
            if hasattr(st, 'secrets') and 'GEMINI_API_KEY' in st.secrets:
                api_key = st.secrets['GEMINI_API_KEY']
                genai.configure(api_key=api_key)
                
                self.model = genai.GenerativeModel(
                    model_name=self.model_name,
                    generation_config={
                        "temperature": 0.3,  # Mais conservador para prontu√°rios
                        "top_p": 0.95,
                        "top_k": 40,
                        "max_output_tokens": 8192,
                    }
                )
                self.logger.info("API configurada com sucesso para prontu√°rios")
                return True
            else:
                self.logger.error("GEMINI_API_KEY n√£o encontrada em secrets")
                return False
        except Exception as e:
            self.logger.error("Erro ao configurar API para prontu√°rios", error=e)
            error_msg = get_friendly_error_message(e)
            st.error(error_msg)
            return False
    
    def generate_traditional_record(
        self,
        context: str,
        diagnosticos: Optional[list] = None,
        max_retries: int = 2
    ) -> Tuple[Optional[str], Optional[str]]:
        """
        Gera prontu√°rio m√©dico no formato tradicional brasileiro.
        
        Args:
            context: Contexto completo da consulta
            diagnosticos: Lista opcional de diagn√≥sticos
            max_retries: N√∫mero m√°ximo de tentativas
        
        Returns:
            Tupla (prontu√°rio_texto, mensagem_erro)
        """
        start_time = time.time()
        self.logger.info("Iniciando gera√ß√£o de prontu√°rio tradicional", context_length=len(context))
        
        if not self.model:
            self.logger.error("Modelo n√£o configurado para gerar prontu√°rio")
            return None, "Modelo Gemini n√£o configurado"
        
        # Criar contexto de diagn√≥sticos se dispon√≠vel
        diagnosticos_text = ""
        if diagnosticos and len(diagnosticos) > 0:
            diagnosticos_text = "\n\n**HIP√ìTESES DIAGN√ìSTICAS GERADAS:**\n"
            for idx, diag in enumerate(diagnosticos[:5], 1):
                diagnosticos_text += f"{idx}. {diag.get('nome', 'N/A')} - {diag.get('probabilidade', 0)}%\n"
        
        prompt = f"""Voc√™ √© um m√©dico experiente criando um prontu√°rio m√©dico educacional no formato TRADICIONAL brasileiro.

**IMPORTANTE:**
- Este √© um prontu√°rio EDUCACIONAL para fins de ensino
- Organize as informa√ß√µes do caso nos campos apropriados
- Mantenha linguagem t√©cnica m√©dica adequada
- Inclua TODOS os dados relevantes fornecidos
- Use formato Markdown para melhor legibilidade
- Se alguma informa√ß√£o n√£o estiver dispon√≠vel, escreva "N√£o informado" ou "N√£o avaliado"

**DADOS DO CASO CL√çNICO:**
{context}
{diagnosticos_text}

**ESTRUTURA DO PRONTU√ÅRIO TRADICIONAL BRASILEIRO:**

## üìã IDENTIFICA√á√ÉO
- Nome: [Se n√£o informado, use "Paciente"]
- Idade e Sexo: [Extrair dos dados]
- Data da Consulta: {datetime.now().strftime("%d/%m/%Y")}
- Profiss√£o: [Se informado]
- Naturalidade/Proced√™ncia: [Se informado]

## üó£Ô∏è QUEIXA PRINCIPAL (QP)
[Sintoma ou motivo principal que levou o paciente a procurar atendimento - em uma frase curta]

## üìñ HIST√ìRIA DA DOEN√áA ATUAL (HDA)
[Descri√ß√£o cronol√≥gica e detalhada dos sintomas atuais, incluindo:
- In√≠cio dos sintomas (quando come√ßou)
- Caracter√≠sticas (tipo, intensidade, localiza√ß√£o)
- Evolu√ß√£o (melhora, piora, est√°vel)
- Fatores de melhora ou piora
- Sintomas associados
- Tratamentos j√° realizados]

## üîç REVIS√ÉO DE SISTEMAS
[Investiga√ß√£o de sintomas por sistemas - mencionar apenas se informado:
- Geral: febre, perda de peso, astenia
- Cardiovascular: palpita√ß√µes, dispneia, edema
- Respirat√≥rio: tosse, dispneia, dor tor√°cica
- Gastrointestinal: n√°useas, v√¥mitos, diarreia, constipa√ß√£o
- Geniturin√°rio: dis√∫ria, hemat√∫ria, altera√ß√µes urin√°rias
- Neurol√≥gico: cefaleia, tonturas, altera√ß√µes sensitivas
- Outros sistemas relevantes]

## üè• HIST√ìRIA PATOL√ìGICA PREGRESSA (HPP)
[Doen√ßas anteriores, cirurgias, interna√ß√µes, alergias, medica√ß√µes em uso]

## üë®‚Äçüë©‚Äçüëß‚Äçüë¶ HIST√ìRIA FAMILIAR (HF)
[Doen√ßas relevantes em familiares de primeiro grau]

## üö¨ HIST√ìRIA SOCIAL E H√ÅBITOS DE VIDA (HS)
[Tabagismo, etilismo, uso de drogas, atividade f√≠sica, alimenta√ß√£o, condi√ß√µes de moradia]

## üî¨ EXAMES COMPLEMENTARES
[Resultados de exames laboratoriais, de imagem ou outros procedimentos - se dispon√≠veis]

## ü©∫ EXAME F√çSICO (EF)
### Estado Geral
[Aspecto geral do paciente]

### Sinais Vitais
[PA, FC, FR, Temperatura, Sat O2 - se informados]

### Exame F√≠sico Segmentar
[Detalhar os achados por sistemas/segmentos examinados]

## üí≠ IMPRESS√ïES DIAGN√ìSTICAS
[Liste as hip√≥teses diagn√≥sticas em ordem de probabilidade, baseadas nos dados apresentados]

## üìù CONDUTA
[Plano terap√™utico proposto, exames solicitados, orienta√ß√µes, encaminhamentos]

---
*Prontu√°rio gerado para fins educacionais - {datetime.now().strftime("%d/%m/%Y √†s %H:%M")}*

**IMPORTANTE:** Forne√ßa um prontu√°rio completo e bem estruturado usando APENAS as informa√ß√µes dispon√≠veis no contexto fornecido. Para campos sem informa√ß√£o, indique claramente "N√£o informado" ou "N√£o avaliado".

Retorne APENAS o prontu√°rio formatado em Markdown, sem coment√°rios adicionais."""
        
        # Tentar gerar com retry
        for attempt in range(max_retries):
            try:
                self.logger.debug(f"Tentativa {attempt + 1}/{max_retries} de gerar prontu√°rio tradicional")
                response = self.model.generate_content(prompt)
                
                # Atualizar timestamp de √∫ltima chamada √† API
                st.session_state.last_api_call = datetime.now()
                
                if response and response.text:
                    duration = time.time() - start_time
                    self.logger.log_api_call(
                        endpoint="generate_traditional_record",
                        success=True,
                        duration=duration,
                        num_diagnostics=len(diagnosticos) if diagnosticos else 0
                    )
                    return response.text.strip(), None
                else:
                    if attempt < max_retries - 1:
                        self.logger.warning("Resposta vazia, tentando novamente")
                        time.sleep(1)
                        continue
                    self.logger.error("Resposta vazia ap√≥s todas as tentativas")
                    return None, "Resposta vazia do modelo"
                    
            except Exception as e:
                self.logger.error(f"Erro na tentativa {attempt + 1}/{max_retries}", error=e)
                if attempt < max_retries - 1:
                    time.sleep(1)
                    continue
                else:
                    duration = time.time() - start_time
                    self.logger.log_api_call(
                        endpoint="generate_traditional_record",
                        success=False,
                        duration=duration,
                        error=str(e)
                    )
                    error_msg = get_friendly_error_message(e)
                    return None, error_msg
        
        return None, "Erro desconhecido"
    
    def generate_soap_record(
        self,
        context: str,
        diagnosticos: Optional[list] = None,
        max_retries: int = 2
    ) -> Tuple[Optional[str], Optional[str]]:
        """
        Gera prontu√°rio m√©dico no formato SOAP.
        
        Args:
            context: Contexto completo da consulta
            diagnosticos: Lista opcional de diagn√≥sticos
            max_retries: N√∫mero m√°ximo de tentativas
        
        Returns:
            Tupla (prontu√°rio_texto, mensagem_erro)
        """
        start_time = time.time()
        self.logger.info("Iniciando gera√ß√£o de prontu√°rio SOAP", context_length=len(context))
        
        if not self.model:
            self.logger.error("Modelo n√£o configurado para gerar prontu√°rio")
            return None, "Modelo Gemini n√£o configurado"
        
        # Criar contexto de diagn√≥sticos se dispon√≠vel
        diagnosticos_text = ""
        if diagnosticos and len(diagnosticos) > 0:
            diagnosticos_text = "\n\n**HIP√ìTESES DIAGN√ìSTICAS GERADAS:**\n"
            for idx, diag in enumerate(diagnosticos[:5], 1):
                diagnosticos_text += f"{idx}. {diag.get('nome', 'N/A')} - {diag.get('probabilidade', 0)}%\n"
        
        prompt = f"""Voc√™ √© um m√©dico experiente criando um prontu√°rio m√©dico educacional no formato SOAP (Subjetivo, Objetivo, Avalia√ß√£o, Plano).

**IMPORTANTE:**
- Este √© um prontu√°rio EDUCACIONAL para fins de ensino
- Organize as informa√ß√µes do caso na estrutura SOAP
- Mantenha linguagem t√©cnica m√©dica adequada
- Inclua TODOS os dados relevantes fornecidos
- Use formato Markdown para melhor legibilidade
- Seja conciso mas completo

**DADOS DO CASO CL√çNICO:**
{context}
{diagnosticos_text}

**ESTRUTURA DO PRONTU√ÅRIO SOAP:**

## üìã IDENTIFICA√á√ÉO
- Paciente: [Idade, sexo, profiss√£o se informado]
- Data: {datetime.now().strftime("%d/%m/%Y √†s %H:%M")}

---

## üó£Ô∏è S - SUBJETIVO
**[Informa√ß√µes RELATADAS pelo paciente]**

### Queixa Principal (QP)
[Motivo da consulta na voz do paciente]

### Hist√≥ria da Doen√ßa Atual (HDA)
[Narrativa do paciente sobre seus sintomas:
- O que est√° sentindo
- Quando come√ßou
- Como evoluiu
- O que melhora ou piora
- Sintomas associados que relata]

### Hist√≥ria Pregressa
[Doen√ßas anteriores, cirurgias, alergias, medica√ß√µes em uso - conforme relatado]

### Hist√≥ria Familiar
[Doen√ßas em familiares - se relatado]

### Hist√≥ria Social
[H√°bitos de vida, profiss√£o, condi√ß√µes sociais - se relatado]

---

## üîç O - OBJETIVO  
**[Dados CONCRETOS e MENSUR√ÅVEIS observados]**

### Sinais Vitais
[Medidas objetivas: PA, FC, FR, Temperatura, Sat O2, etc.]

### Exame F√≠sico
[Achados do exame f√≠sico segmentar:
- Estado geral
- Aspectos espec√≠ficos observados
- Auscultas
- Palpa√ß√µes
- Inspe√ß√£o
- Outros achados objetivos]

### Exames Complementares
[Resultados de exames laboratoriais, imagem, ECG, etc. - se dispon√≠veis]

---

## üí≠ A - AVALIA√á√ÉO (An√°lise)
**[INTERPRETA√á√ÉO cl√≠nica dos dados]**

### S√≠ntese do Caso
[Resumo integrado das informa√ß√µes subjetivas e objetivas]

### Hip√≥teses Diagn√≥sticas
[Lista de diagn√≥sticos diferenciais em ordem de probabilidade:
1. Diagn√≥stico mais prov√°vel - Justificativa
2. Segunda hip√≥tese - Justificativa
3. Terceira hip√≥tese - Justificativa
...]

### Racioc√≠nio Cl√≠nico
[Explica√ß√£o de como os dados levam √†s hip√≥teses diagn√≥sticas]

---

## üìù P - PLANO
**[CONDUTAS e a√ß√µes propostas]**

### Tratamento
[Medica√ß√µes, doses, vias, dura√ß√£o]

### Exames Solicitados
[Exames complementares necess√°rios]

### Orienta√ß√µes
[Recomenda√ß√µes ao paciente]

### Retorno/Seguimento
[Quando retornar, sinais de alerta]

### Encaminhamentos
[Se necess√°rio, para qual especialidade]

---
*Prontu√°rio SOAP gerado para fins educacionais - {datetime.now().strftime("%d/%m/%Y √†s %H:%M")}*

**IMPORTANTE:** Forne√ßa um prontu√°rio SOAP completo e bem estruturado usando APENAS as informa√ß√µes dispon√≠veis no contexto fornecido. Seja objetivo e t√©cnico.

Retorne APENAS o prontu√°rio formatado em Markdown, sem coment√°rios adicionais."""
        
        # Tentar gerar com retry
        for attempt in range(max_retries):
            try:
                self.logger.debug(f"Tentativa {attempt + 1}/{max_retries} de gerar prontu√°rio SOAP")
                response = self.model.generate_content(prompt)
                
                # Atualizar timestamp de √∫ltima chamada √† API
                st.session_state.last_api_call = datetime.now()
                
                if response and response.text:
                    duration = time.time() - start_time
                    self.logger.log_api_call(
                        endpoint="generate_soap_record",
                        success=True,
                        duration=duration,
                        num_diagnostics=len(diagnosticos) if diagnosticos else 0
                    )
                    return response.text.strip(), None
                else:
                    if attempt < max_retries - 1:
                        self.logger.warning("Resposta vazia, tentando novamente")
                        time.sleep(1)
                        continue
                    self.logger.error("Resposta vazia ap√≥s todas as tentativas")
                    return None, "Resposta vazia do modelo"
                    
            except Exception as e:
                self.logger.error(f"Erro na tentativa {attempt + 1}/{max_retries}", error=e)
                if attempt < max_retries - 1:
                    time.sleep(1)
                    continue
                else:
                    duration = time.time() - start_time
                    self.logger.log_api_call(
                        endpoint="generate_soap_record",
                        success=False,
                        duration=duration,
                        error=str(e)
                    )
                    error_msg = get_friendly_error_message(e)
                    return None, error_msg
        
        return None, "Erro desconhecido"


# Fun√ß√µes auxiliares para facilitar uso

def generate_traditional_record(
    context: str,
    diagnosticos: Optional[list] = None
) -> Tuple[Optional[str], Optional[str]]:
    """
    Fun√ß√£o auxiliar para gerar prontu√°rio tradicional.
    
    Args:
        context: Contexto da consulta
        diagnosticos: Lista opcional de diagn√≥sticos
    
    Returns:
        Tupla (prontu√°rio, erro)
    """
    generator = MedicalRecordGenerator()
    return generator.generate_traditional_record(context, diagnosticos)


def generate_soap_record(
    context: str,
    diagnosticos: Optional[list] = None
) -> Tuple[Optional[str], Optional[str]]:
    """
    Fun√ß√£o auxiliar para gerar prontu√°rio SOAP.
    
    Args:
        context: Contexto da consulta
        diagnosticos: Lista opcional de diagn√≥sticos
    
    Returns:
        Tupla (prontu√°rio, erro)
    """
    generator = MedicalRecordGenerator()
    return generator.generate_soap_record(context, diagnosticos)


def get_medical_record_generator():
    """
    Retorna inst√¢ncia singleton do gerador de prontu√°rios.
    
    Returns:
        Inst√¢ncia de MedicalRecordGenerator
    """
    if 'medical_record_generator' not in st.session_state:
        st.session_state.medical_record_generator = MedicalRecordGenerator()
    
    return st.session_state.medical_record_generator

