"""
Validators - Valida√ß√µes e verifica√ß√µes de seguran√ßa.

Este m√≥dulo cont√©m fun√ß√µes para validar API keys, contexto e outros requisitos.
"""

import streamlit as st
import google.generativeai as genai
from typing import Tuple, Optional
import re


def validate_gemini_api_key() -> Tuple[bool, Optional[str]]:
    """
    Valida se a API key do Gemini est√° configurada e √© v√°lida.
    
    Returns:
        Tupla (is_valid: bool, error_message: str)
    """
    # Verificar se existe no secrets
    if not hasattr(st, 'secrets'):
        return False, "Arquivo secrets.toml n√£o encontrado"
    
    if 'GEMINI_API_KEY' not in st.secrets:
        return False, "GEMINI_API_KEY n√£o est√° configurada em secrets.toml"
    
    api_key = st.secrets['GEMINI_API_KEY']
    
    # Verificar se n√£o est√° vazia
    if not api_key or not api_key.strip():
        return False, "GEMINI_API_KEY est√° vazia"
    
    # Verificar formato b√°sico (come√ßa com AIza ou outras varia√ß√µes do Google)
    if not (api_key.startswith('AIza') or len(api_key) > 30):
        return False, "GEMINI_API_KEY parece ter formato inv√°lido"
    
    # Tentar configurar e fazer teste simples
    try:
        genai.configure(api_key=api_key)
        
        # Tentar listar modelos como teste
        list(genai.list_models())
        
        return True, None
        
    except Exception as e:
        error_msg = str(e)
        
        if "API_KEY_INVALID" in error_msg or "invalid" in error_msg.lower():
            return False, "API key inv√°lida. Verifique se est√° correta."
        elif "quota" in error_msg.lower() or "limit" in error_msg.lower():
            return False, "Limite de uso da API excedido. Aguarde ou use outra key."
        elif "permission" in error_msg.lower():
            return False, "Permiss√£o negada. Verifique se a API est√° habilitada."
        else:
            return False, f"Erro ao validar API key: {error_msg}"


def validate_context_for_analysis(context: str, min_chars: int = 50) -> Tuple[bool, Optional[str]]:
    """
    Valida se h√° contexto suficiente para an√°lise.
    
    Args:
        context: Texto do contexto
        min_chars: N√∫mero m√≠nimo de caracteres
    
    Returns:
        Tupla (is_valid: bool, error_message: str)
    """
    if not context or not context.strip():
        return False, "Nenhum dado foi fornecido para an√°lise"
    
    context_clean = context.strip()
    
    if len(context_clean) < min_chars:
        return False, f"Contexto muito curto (m√≠nimo {min_chars} caracteres). Forne√ßa mais informa√ß√µes sobre o caso."
    
    # Verificar se tem pelo menos algumas palavras
    words = context_clean.split()
    if len(words) < 10:
        return False, "Forne√ßa mais detalhes sobre o caso cl√≠nico (m√≠nimo 10 palavras)."
    
    # Verificar se n√£o √© s√≥ n√∫meros ou caracteres especiais
    alpha_chars = sum(c.isalpha() for c in context_clean)
    if alpha_chars < min_chars / 2:
        return False, "O contexto deve conter texto descritivo, n√£o apenas n√∫meros."
    
    return True, None


def validate_diagnosticos(diagnosticos: list) -> Tuple[bool, Optional[str]]:
    """
    Valida estrutura da lista de diagn√≥sticos.
    
    Args:
        diagnosticos: Lista de diagn√≥sticos
    
    Returns:
        Tupla (is_valid: bool, error_message: str)
    """
    if not diagnosticos:
        return False, "Nenhum diagn√≥stico fornecido"
    
    if not isinstance(diagnosticos, list):
        return False, "Diagn√≥sticos devem ser uma lista"
    
    for idx, diag in enumerate(diagnosticos):
        if not isinstance(diag, dict):
            return False, f"Diagn√≥stico {idx+1} n√£o √© um dicion√°rio v√°lido"
        
        if 'nome' not in diag:
            return False, f"Diagn√≥stico {idx+1} n√£o tem campo 'nome'"
        
        if 'probabilidade' not in diag:
            return False, f"Diagn√≥stico {idx+1} n√£o tem campo 'probabilidade'"
        
        # Validar probabilidade
        prob = diag.get('probabilidade', 0)
        if not isinstance(prob, (int, float)):
            return False, f"Probabilidade do diagn√≥stico {idx+1} deve ser num√©rica"
        
        if prob < 0 or prob > 100:
            return False, f"Probabilidade do diagn√≥stico {idx+1} deve estar entre 0 e 100"
    
    return True, None


def check_minimum_data_for_prontuario(context: str) -> Tuple[bool, Optional[str]]:
    """
    Verifica se h√° dados m√≠nimos para gerar prontu√°rio.
    
    Args:
        context: Contexto do caso
    
    Returns:
        Tupla (is_valid: bool, error_message: str)
    """
    if not context or len(context.strip()) < 100:
        return False, "Dados insuficientes para gerar prontu√°rio. Adicione mais informa√ß√µes sobre o caso."
    
    context_lower = context.lower()
    
    # Verificar se tem pelo menos alguns elementos b√°sicos
    has_patient_info = any(word in context_lower for word in ['paciente', 'anos', 'idade', 'sexo', 'masculino', 'feminino'])
    has_complaint = any(word in context_lower for word in ['queixa', 'dor', 'febre', 'sintoma', 'refere', 'relata'])
    
    if not has_patient_info:
        return False, "Adicione informa√ß√µes b√°sicas do paciente (idade, sexo) para gerar o prontu√°rio."
    
    if not has_complaint:
        return False, "Adicione a queixa principal ou sintomas do paciente para gerar o prontu√°rio."
    
    return True, None


def sanitize_input(text: str, max_length: int = 50000) -> str:
    """
    Sanitiza input do usu√°rio.
    
    Args:
        text: Texto a sanitizar
        max_length: Tamanho m√°ximo permitido
    
    Returns:
        Texto sanitizado
    """
    if not text:
        return ""
    
    # Remover espa√ßos extras
    text = " ".join(text.split())
    
    # Limitar tamanho
    if len(text) > max_length:
        text = text[:max_length]
    
    # Remover caracteres de controle perigosos (manter quebras de linha)
    text = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', text)
    
    return text


def validate_specialty(specialty: str) -> Tuple[bool, Optional[str]]:
    """
    Valida se a especialidade √© v√°lida.
    
    Args:
        specialty: Nome da especialidade
    
    Returns:
        Tupla (is_valid: bool, error_message: str)
    """
    valid_specialties = [
        "Cl√≠nica M√©dica",
        "Cardiologia",
        "Pneumologia",
        "Gastroenterologia",
        "Neurologia",
        "Pediatria",
        "Ginecologia/Obstetr√≠cia",
        "Outros"
    ]
    
    if not specialty:
        return False, "Especialidade n√£o selecionada"
    
    if specialty not in valid_specialties:
        return False, f"Especialidade '{specialty}' n√£o √© v√°lida"
    
    return True, None


def get_validation_summary() -> dict:
    """
    Retorna resumo de todas as valida√ß√µes do sistema.
    
    Returns:
        Dicion√°rio com status das valida√ß√µes
    """
    summary = {
        'api_key_valid': False,
        'api_key_error': None,
        'system_ready': False
    }
    
    # Validar API key
    api_valid, api_error = validate_gemini_api_key()
    summary['api_key_valid'] = api_valid
    summary['api_key_error'] = api_error
    
    # Sistema pronto se API key v√°lida
    summary['system_ready'] = api_valid
    
    return summary


# Fun√ß√µes de helper para mensagens de erro amig√°veis

def get_friendly_error_message(error: Exception) -> str:
    """
    Converte exce√ß√£o em mensagem amig√°vel.
    
    Args:
        error: Exce√ß√£o capturada
    
    Returns:
        Mensagem amig√°vel para o usu√°rio
    """
    error_str = str(error).lower()
    
    # Erros de API
    if "api_key_invalid" in error_str or "invalid api key" in error_str:
        return "‚ùå API key inv√°lida. Verifique sua configura√ß√£o em .streamlit/secrets.toml"
    
    if "quota" in error_str or "limit exceeded" in error_str:
        return "‚è±Ô∏è Limite de uso da API excedido. Aguarde alguns minutos ou use outra API key."
    
    if "rate limit" in error_str:
        return "üö¶ Muitas requisi√ß√µes em pouco tempo. Aguarde alguns segundos e tente novamente."
    
    if "timeout" in error_str:
        return "‚åõ Tempo de resposta excedido. Tente novamente."
    
    if "connection" in error_str or "network" in error_str:
        return "üåê Erro de conex√£o com a API. Verifique sua internet e tente novamente."
    
    if "permission" in error_str or "forbidden" in error_str:
        return "üîí Permiss√£o negada. Verifique se a API Gemini est√° habilitada no seu projeto."
    
    if "not found" in error_str:
        return "üîç Recurso n√£o encontrado. Verifique se o modelo est√° dispon√≠vel."
    
    if "invalid argument" in error_str or "invalid request" in error_str:
        return "‚ö†Ô∏è Requisi√ß√£o inv√°lida. Verifique os dados fornecidos."
    
    # Erro gen√©rico
    return f"‚ùå Erro inesperado: {str(error)[:100]}"


def check_rate_limit_status() -> Tuple[bool, Optional[str]]:
    """
    Verifica status de rate limiting.
    
    Returns:
        Tupla (can_proceed: bool, message: str)
    """
    # Verificar √∫ltima chamada
    if 'last_api_call' in st.session_state and st.session_state.last_api_call:
        from datetime import datetime, timedelta
        
        time_since_last = datetime.now() - st.session_state.last_api_call
        
        if time_since_last.total_seconds() < 3:
            remaining = 3 - int(time_since_last.total_seconds())
            return False, f"‚è±Ô∏è Aguarde {remaining} segundo(s) antes da pr√≥xima an√°lise (rate limiting)"
    
    return True, None

